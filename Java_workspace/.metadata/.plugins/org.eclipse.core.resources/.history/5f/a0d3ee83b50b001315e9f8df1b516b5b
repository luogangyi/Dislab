package lgy;

import java.io.*;
import java.util.*;
import java.util.concurrent.Executors;
import java.net.*;

import common.Log;
import common.TYPE;
public class DispatcherAlgorithm  implements Runnable{

	
	private static String config_file_name = "clccfg.cfg";

	private static String db_address;
	private static String db_user_name;
	private static String db_user_pass;
	private static String db_name;
	private static Map<String,String> config_map;
	private static Log log;
	private Socket client_socket;
	
	
	public DispatcherAlgorithm(Socket clientSocket)
	{
		client_socket = clientSocket;
	}
	
	/**
	 * 初始化，初始化失败，则返回false
	 * @return
	 */
	public static boolean init() throws Exception
	{
		log = new Log("clc_Dispatch_lgy.log");
		
		//读配置文件
		readConfigFile();
		
		
		if(!config_map.containsKey("DBServerAddr".toLowerCase()))
		{
			System.out.println("Initiate db_address Failed!");
			return false;
		}
		else
		{	
			db_address = config_map.get("DBServerAddr".toLowerCase());
		}
		
		
		if(!config_map.containsKey("DBUserName".toLowerCase()))
		{
			System.out.println("Initiate db_user_name Failed!");
			return false;
		}
		else
		{	
			db_user_name = config_map.get("DBUserName".toLowerCase());
		}
		
		if(!config_map.containsKey("DBUserPass".toLowerCase()))
		{
			System.out.println("Initiate db_user_pass Failed!");
			return false;
		}
		else
		{	
			db_user_pass = config_map.get("DBUserPass".toLowerCase());
		}
		
		
		if(!config_map.containsKey("DBName".toLowerCase()))
		{
			System.out.println("Initiate db_name Failed!");
			return false;
		}
		else
		{	
			db_name = config_map.get("DBName".toLowerCase());
		}
		
		
		return true;
		
	}
	
	public static void readConfigFile() throws Exception
	{
		config_map = new HashMap<String,String>();
		
		BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(config_file_name)));
		String line = null;
		String [] key_value;
		while((line = br.readLine())!=null)
		{
			if(line.startsWith("#"))//跳过注释行
				continue;
			
			key_value = line.split("=");
			
			if(key_value.length != 2)
				continue;
			
			//key 全部转化为小写
			config_map.put(key_value[0].toLowerCase(), key_value[1]);		
		}
		br.close();
	}
	//将 "0021" 转化成 int 型的 21
	private int convertRecLen(byte[] len_buff)
	{
		String result="";
		boolean begin = false;

		for(int i=0;i<4;i++)
		{
			if(len_buff[i]!='0')
			{
				result += (char)len_buff[i];
				begin = true;
			}
			else
			{
				if(begin)
					result += (char)len_buff[i];
			}
		}
		if(result != "")
		{
			int  len = Integer.parseInt(result);
			return len;
		}
		return -1;
	}
	
	//模拟 协议中的sprinf（buff,%04d,len）
	//注意TCP是big endian!所以高字节在低地址，即byte[0]要放最高位！
	byte[] getMsgLenBytes(int len) throws Exception
	{
		if(len > 9999 || len <0)
		{
			System.out.println("Length should between 0,9999");
			throw new Exception ("Length should between 0,9999");
		}
		
		byte [] lenbyte = new byte[4];
		for(int i= 3 ;i>=0;i--)
		{
			lenbyte[i] = (byte)(len%10 +'0');
			//System.out.println(lenbyte[i]);
			len = len/10;
		}
		return lenbyte;
	}
	
	
	/**
	 * 接收指令，分析指令，并放回结果
	 */
	public void run()
	{
		byte[] len_buff = new byte[512];  
		byte[] cmd_buff = new byte[512];
		int offset;
		try{
			InputStream in = client_socket.getInputStream();
			OutputStream out = client_socket.getOutputStream();
			
			offset = in.read(len_buff,0,4);
			len_buff[4]='\0';
			int cmd_len = convertRecLen(len_buff);
		
			//System.out.println("Cmd length: " + new String(len_buff));
			offset = in.read(cmd_buff,0,512);
			//System.out.println(cmd_len+" " +offset);
			if(offset!=cmd_len)
			{
				log.write("Error In Reading Socket Data!", TYPE.ERROR);
				System.out.println("Error In Reading Socket Data!");
				return;
			}
			
			String cmd = new String(cmd_buff,0,offset);
			
			//System.out.println(cmd);
			log.write("Receive CMD: "+cmd, TYPE.INFO);
			//分析指令，返回指令执行结果
			String result = analyzeCMD(cmd);
			byte[] msgbuff =result.getBytes();
			byte[] msglen = getMsgLenBytes(msgbuff.length);
			out.write(msglen);
			out.write(msgbuff);
			out.flush();
			
			
			log.write("Return CMD: "+cmd, TYPE.INFO);
			
			
		}catch(Exception e)
		{
			log.write("Error In Socket!", TYPE.ERROR);
			e.printStackTrace();
		}
		
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
