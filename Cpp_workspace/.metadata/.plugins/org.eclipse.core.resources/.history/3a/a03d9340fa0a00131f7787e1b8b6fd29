#include "StartVM.h"
#include <time.h> 

extern Log log;
extern String g_dispatchServerIP;
extern int g_dispatchServerPort;
extern int g_ncVMServerPort;
StartVM::StartVM()
{
	strCmd = "";
	bestNCIP = "";
	vmID = "";
	nfsIP = "";
	nfsDir = "";
	groupStartFlag=false;
	
}

StartVM::~StartVM()
{

}

void StartVM::Do()
{
	String logContent;

	log.write("begin StartVM::Do().", Log::INFO);	
	
	//参数检查
	log.write("begin process parameter.", Log::INFO);
	if( getPara() == false)
	{
		ackCode =  "ACK:START VM:RETN=4,DESC=parameters error";
		return;
	}
	log.write("end process parameter.", Log::INFO);

	//按组启动虚拟机
	if(groupStartFlag)
	{
		if(groupVMStart() == true)
		{
			ackCode =  "ACK:START VM:RETN=0,DESC=Group Start Success!";
		}
	}
	else
	{
		if(singleVMStart() == true)
		{
			ackCode =  "ACK:START VM:RETN=0,DESC=Group Start Failed!";
		}
	}

	log.write("end StartVM::Do().", Log::INFO);
}

bool StartVM::singleVMStart()
{
	//检测虚拟机是否存在
	if( isVMExist() == false)
	{
		ackCode =  "ACK:START VM:RETN=1001,DESC=vm is not exist";
		return false;
	}

	// check whether user can access this vm(id)
	if( checkRight( vmID ) == false )
	{		
		ackCode =  "ACK:START VM:RETN=14,DESC=cannot access this vm";
		return;	
	}

	if( isVMStarted() == true )
	{
		ackCode =  "ACK:START VM:RETN=1001,DESC=vm is already started";
		return;
	}

	//find the nc to apply this VM
	if( applyNC() == false )
	{
		ackCode = "ACK:START VM:RETN=8,DESC=system is busy,please wait";
		return;
	}

	//获取虚拟机所在的NFS
	/*if( getNFSInfo() == false )
	{
		log.write("get the nfs info failed of the vm.", Log::ERROR);
		ackCode = "ACK:START VM:RETN=8,DESC=system internal error";		
		return;
	}*/

	if( startVM() == false )
	{
		log.write("start vm " + vmID + " failed .", Log::ERROR);
		ackCode = "ACK:START VM:RETN=8,DESC=start VM failed";	
		return;
	}	

	updateDB();
	ackCode = "ACK:START VM:RETN=0,DESC=success";
}


bool StartVM::updateDB()
{
	time_t t = time(0); 
    char tmp[64]; 
    strftime( tmp, sizeof(tmp), "%Y/%m/%d %X",localtime(&t) ); 
	String localTime = tmp;

	String sql = "update VMDetail set status=1,host='";
	sql += bestNCIP + "' where id=" + vmID;
	executeDBSQL( sql );

	if( executeDBSQL( sql ) != 1 )
	{
		log.write("update vm status to VMDetail table failed.", Log::ERROR);
		return false;
	}
	return true;

}

bool StartVM::getNFSInfo()
{	
	String sql = "select SID from SCStorDetail where vmid=" + vmID;
	CppMySQLQuery query ;
	

	if( executeDBQuery( sql, query) == false )
		return false;	
	

	int rowCnt = query.numRow();
	if( rowCnt != 1 ) 
		return false;
	
	String sid = query.getStringField("SID");

	sql = "SELECT SCSP.IP,SCSP.DIR FROM SCSP INNER JOIN ";
	sql += "SCStorDetail ON SCSP.ID=SCStorDetail.SID WHERE SCStorDetail.SID=" + sid;
	if( executeDBQuery( sql, query) == false )
		return false;	
	
	rowCnt = query.numRow();
	if( rowCnt < 1 ) 
		return false;

	nfsIP = query.getStringField("IP");
	nfsDir = query.getStringField("DIR");
	return true;
}

bool StartVM::startVM()
{
	
	String request = "START VM:VMID=" + vmID;
	
	int sock = connect2Server( bestNCIP.c_str(), g_ncVMServerPort);
	if( sock == -1 )
	{
		log.write("Connect nc vm server error.", Log::ERROR);
		ackCode = "ACK:START VM:RETN=8,DESC=system internal error";	
		return false;
	}

	if( sendData( request.c_str(), request.size(), sock) == false )
	{
		log.write("send request to nc vm server error.", Log::ERROR);
		ackCode = "ACK:START VM:RETN=8,DESC=system internal error";	
		return false;
	}
	String ack;

	if( recvData( sock, ack) == false )
	{
		log.write("Receive ack message from nc vm server error.", Log::ERROR);
		ackCode = "ACK:START VM:RETN=8,DESC=system internal error";	
		return false;
	}
	log.write("recv ack message:" + ack + " from nc vm server.", Log::INFO);
	//分析结果，得出IP
	int iRetn;
	if( getIntParaValue( ack, "retn", iRetn) == false )
	{
		log.write("get para retn error from ack message.", Log::ERROR);
		ackCode = "ACK:START VM:RETN=8,DESC=system internal error";	
		return false;
	}	
	
	closeSock( sock );
		
		
	ackCode = ack;
	return iRetn == 0;
	
}


bool StartVM::isVMExist()
{
	
	String logContent;	
	
	CppMySQLQuery query ;
	String sql = "select id from VMDetail where id=" + vmID;

	if( executeDBQuery( sql, query) == false )
		return false;

	int rowCnt = query.numRow();

	if( rowCnt >= 1 )		
		return true;
	
	return false;
	
}

bool StartVM::isVMStarted()
{
	
	String logContent;	
	
	CppMySQLQuery query ;
	String sql = "select id from VMDetail where status=1 and id=" + vmID;

	if( executeDBQuery( sql, query) == false )
		return false;	
	

	int rowCnt = query.numRow();

	if( rowCnt >= 1 ) 
		return true;
	return false;
	
}



void StartVM::setUserName(String user)
{
	userName = user;
}
bool StartVM::getPara()
{
	processPara();

	if( paraMap.size() != 1 )
		return false;
	
	map<String,String>::iterator it;

	
	it = paraMap.find("groupid");
	if( it != paraMap.end() )
	{
		groupID = it->second;
		if( groupID.size() == 0 )
			return false;
		else
		{
			groupStartFlag = true;
			return true;
		}
	}



	it = paraMap.find("vmid");
	if( it == paraMap.end() )		
		return false;
	
	vmID = it->second;
	if( vmID.size() == 0 )
		return false;


	return true;
}


bool StartVM::applyNC()
{
	/*if( getVMIDByName() == false )
	{
		log.write("Get vmid from database failed.", Log::ERROR);
		return false;
	}*/

	String request = "GET BEST NC:VMID=" + vmID;

	int sock = connect2Server( g_dispatchServerIP.c_str(), g_dispatchServerPort);
	if( sock == -1 )
	{
		log.write("connect dispatch server error.", Log::ERROR);
		return false;
	}

	if( sendData( request.c_str(), request.size(), sock) == false )
	{
		log.write("send request to dispatch server error.", Log::ERROR);
		return false;
	}
	String ack;

	if( recvData( sock, ack) == false )
	{
		log.write("recv ack message from dispatch server error.", Log::ERROR);
		return false;
	}
	log.write("recv ack message:" + ack + " from dispatch server.", Log::INFO);
	//分析结果，得出IP
	if( getStrParaValue( ack, "ip", bestNCIP) == false )
	{
		log.write("get para ip error from ack message.", Log::ERROR);
		return false;
	}

	
	closeSock( sock );
	return true;
}










